// Generated by https://quicktype.io

export interface YoudaoResponse {
  web_trans: WebTrans
  oxfordAdvanceHtml: Oxford
  pic_dict: PicDict
  video_sents: VideoSents
  simple: Simple
  phrs: Phrs
  oxford: Oxford
  syno: YoudaoSyno
  collins: Collins
  word_video: YoudaoWordVideo
  webster: Oxford
  discriminate: Discriminate
  lang: string
  ec: Ec
  ee: Ee
  blng_sents_part: BlngSentsPart
  individual: Individual
  collins_primary: CollinsPrimary
  rel_word: RelWordClass
  auth_sents_part: AuthSentsPart
  media_sents_part: MediaSentsPart
  expand_ec: ExpandEc
  etym: Etym
  special: YoudaoSpecial
  senior: Senior
  input: string
  meta: Meta
  le: string
  oxfordAdvance: Oxford
}

export interface AuthSentsPart {
  'sentence-count': number
  more: string
  sent: AuthSentsPartSent[]
}

export interface AuthSentsPartSent {
  score: number
  speech: string
  'speech-size': string
  source: string
  url: string
  foreign: string
}

export interface BlngSentsPart {
  'sentence-count': number
  'sentence-pair': SentencePair[]
  more: string
  'trs-classify': TrsClassify[]
}

export interface SentencePair {
  sentence: string
  'sentence-eng': string
  'sentence-translation': string
  'speech-size': string
  'aligned-words': AlignedWords
  source: string
  url: string
  'sentence-speech': string
}

export interface AlignedWords {
  src: Src
  tran: Src
}

export interface Src {
  chars: Char[]
}

export interface Char {
  '@s': string
  '@e': string
  aligns: Aligns
  '@id': string
}

export interface Aligns {
  sc: Sc[]
  tc: Sc[]
}

export interface Sc {
  '@id': string
}

export interface TrsClassify {
  proportion: string
  tr: string
}

export interface Collins {
  collins_entries: CollinsEntry[]
}

export interface CollinsEntry {
  entries: Entries
  phonetic: string
  basic_entries: BasicEntries
  headword: string
  star: string
}

export interface BasicEntries {
  basic_entry: BasicEntry[]
}

export interface BasicEntry {
  cet: string
  headword: string
  wordforms: Wordforms
}

export interface Wordforms {
  wordform: Wordform[]
}

export interface Wordform {
  word: PurpleForm
}

export enum PurpleForm {
  FormTests = "tests'",
  Tested = 'tested',
  Testing = 'testing',
  Tests = 'tests',
}

export interface Entries {
  entry: EntriesEntry[]
}

export interface EntriesEntry {
  tran_entry: TranEntry[]
}

export interface TranEntry {
  pos_entry?: PosEntry
  exam_sents?: ExamSents
  tran?: string
  seeAlsos?: SeeAlsos
  gram?: string
  headword?: string
  sees?: Sees
}

export interface ExamSents {
  sent: ExamSentsSent[]
}

export interface ExamSentsSent {
  chn_sent: string
  eng_sent: string
}

export interface PosEntry {
  pos: string
  pos_tips: string
}

export interface SeeAlsos {
  seealso: string
  seeAlso: See[]
}

export interface See {
  seeword: string
}

export interface Sees {
  see: See[]
}

export interface CollinsPrimary {
  words: Words
  gramcat: Gramcat[]
}

export interface Gramcat {
  audiourl: string
  pronunciation: string
  senses: GramcatSense[]
  partofspeech: string
  audio: string
  forms: FormElement[]
}

export interface FormElement {
  form: PurpleForm
}

export interface GramcatSense {
  sensenumber: string
  examples: Example[]
  definition: string
  partofspeechshift: Partofspeechshift[]
  lang: string
  word: string
}

export interface Example {
  sense: ExampleSense
  example: string
}

export interface ExampleSense {
  lang: string
  word: string
}

export interface Partofspeechshift {
  partofspeech: string
  sense: PartofspeechshiftSense[]
  forms: FormElement[]
}

export interface PartofspeechshiftSense {
  examples: Example[]
  lang: string
  word: string
}

export interface Words {
  indexforms: string[]
  word: string
}

export interface Discriminate {
  data: Datum[]
  'return-phrase': string
}

export interface Datum {
  source: string
  usages: DatumUsage[]
  headwords: string[]
  tran: string
}

export interface DatumUsage {
  headword: string
  usage: string
}

export interface Ec {
  web_trans: string[]
  special: SpecialElement[]
  exam_type: string[]
  source: EcSource
  word: EcWord
}

export interface EcSource {
  name: string
  url: string
}

export interface SpecialElement {
  nat: string
  major: string
}

export interface EcWord {
  usphone: string
  ukphone: string
  ukspeech: string
  trs: IndividualTr[]
  wfs: PurpleWf[]
  'return-phrase': string
  usspeech: string
}

export interface IndividualTr {
  pos: string
  tran: string
}

export interface PurpleWf {
  wf: WfWf
}

export interface WfWf {
  name: string
  value: PurpleForm
}

export interface Ee {
  source: EcSource
  word: EeWord
}

export interface EeWord {
  trs: PurpleTr[]
  speech: string
  'return-phrase': string
}

export interface PurpleTr {
  pos: string
  tr: FluffyTr[]
}

export interface FluffyTr {
  examples?: string[]
  tran: string
  'similar-words'?: string[]
}

export interface Etym {
  etyms: Etyms
  word: string
}

export interface Etyms {
  zh: Zh[]
}

export interface Zh {
  source: string
  word: string
  value: string
  url: string
  desc: string
}

export interface ExpandEc {
  'return-phrase': string
  source: EcSource
  word: ExpandEcWord[]
}

export interface ExpandEcWord {
  transList: TransList[]
  pos: string
  wfs: WfWf[]
}

export interface TransList {
  content: Content
  trans: string
}

export interface Content {
  detailPos: DetailPos
  examType?: Colloc[]
  sents: ContentSent[]
}

export enum DetailPos {
  CN = 'cn.',
  VT = 'vt.',
  VTVi = 'vt.&vi.',
}

export interface Colloc {
  en: string
  zh: string
}

export interface ContentSent {
  sentOrig: string
  sourceType: SourceType
  sentSpeech: string
  sentTrans: string
  source: string
  usages?: SentUsage[]
  type?: Type
}

export enum SourceType {
  权威 = '权威',
  真题 = '真题',
}

export enum Type {
  Cet4 = 'CET4',
  Cet6 = 'CET6',
  Senior = 'SENIOR',
}

export interface SentUsage {
  phrase: string
  phraseTrans: string
}

export interface Individual {
  trs: IndividualTr[]
  idiomatic: Idiomatic[]
  level: string
  examInfo: ExamInfo
  'return-phrase': string
  pastExamSents: PastExamSent[]
}

export interface ExamInfo {
  year: number
  questionTypeInfo: QuestionTypeInfo[]
  recommendationRate: number
  frequency: number
}

export interface QuestionTypeInfo {
  time: number
  type: string
}

export interface Idiomatic {
  colloc: Colloc
}

export interface PastExamSent {
  en: string
  source: string
  zh: string
}

export interface MediaSentsPart {
  'sentence-count': number
  more: string
  query: string
  sent: MediaSentsPartSent[]
}

export interface MediaSentsPartSent {
  '@mediatype': string
  snippets: Snippets
  'speech-size'?: string
  eng: string
  chn?: string
}

export interface Snippets {
  snippet: Snippet[]
}

export interface Snippet {
  streamUrl: string
  duration?: string
  swf: string
  name: string
  source: string
  win8?: string
  sourceUrl?: string
  imageUrl?: string
}

export interface Meta {
  input: string
  guessLanguage: string
  isHasSimpleDict: string
  le: string
  lang: string
  dicts: string[]
}

export interface Oxford {
  encryptedData: string
}

export interface Phrs {
  word: string
  phrs: Phr[]
}

export interface Phr {
  headword: string
  translation: string
}

export interface PicDict {
  pic: Pic[]
}

export interface Pic {
  image: string
  host: string
  url: string
}

export interface RelWordClass {
  word: string
  stem: string
  rels: RelElement[]
}

export interface RelElement {
  rel: RelRel
}

export interface RelRel {
  pos: string
  words: RelWord[]
}

export interface RelWord {
  word: string
  tran: string
}

export interface Senior {
  encryptedData: string
  source: SeniorSource
}

export interface SeniorSource {
  name: string
}

export interface Simple {
  query: string
  word: SimpleWord[]
}

export interface SimpleWord {
  usphone: string
  ukphone: string
  ukspeech: string
  'return-phrase': string
  usspeech: string
}

export interface YoudaoSpecial {
  summary: SpecialSummary
  'co-add': string
  total: string
  entries: SpecialEntry[]
}

export interface SpecialEntry {
  entry: EntryEntry
}

export interface EntryEntry {
  major: string
  trs: EntryTr[]
  num: number
}

export interface EntryTr {
  tr: TentacledTr
}

export interface TentacledTr {
  nat: string
  chnSent?: string
  cite: string
  docTitle?: string
  engSent?: string
  url?: string
}

export interface SpecialSummary {
  sources: Sources
  text: string
}

export interface Sources {
  source: SourcesSource
}

export interface SourcesSource {
  site: string
  url: string
}

export interface YoudaoSyno {
  synos: SynoElement[]
  word: string
}

export interface SynoElement {
  pos: string
  ws: string[]
  tran: string
}

export interface VideoSents {
  sents_data: SentsDatum[]
  word_info: WordInfo
}

export interface SentsDatum {
  video_cover: string
  contributor: string
  subtitle_srt: string
  id: number
  video: string
}

export interface WordInfo {
  'return-phrase': string
  sense: string[]
}

export interface WebTrans {
  'web-translation': WebTranslation[]
}

export interface WebTranslation {
  '@same'?: string
  key: string
  'key-speech': string
  trans: Tran[]
}

export interface Tran {
  summary?: TranSummary
  value: string
  support?: number
  url?: string
  cls?: Cls
}

export interface Cls {
  cl: string[]
}

export interface TranSummary {
  line: string[]
}

export interface YoudaoWordVideo {
  word_videos: WordVideoElement[]
}

export interface WordVideoElement {
  ad: Ad
  video: Video
}

export interface Ad {
  avatar: string
  title: string
  url: string
}

export interface Video {
  cover: string
  image: string
  title: string
  url: string
}
